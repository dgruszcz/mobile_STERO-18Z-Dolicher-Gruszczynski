plugins: # Definicje warstw (lokalny planer nie posiada warstwy statycznej)
    - {name: obstacles,        type: "costmap_2d::VoxelLayer"}      # Warstwa przeszkód wykrywanych przez laser
    - {name: inflation,        type: "costmap_2d::InflationLayer"}  # Warstwa nadmuchania przeszkód

global_frame: base_link           # Mapa musi być powiązana z robotem bym mogła się wraz z nim poruszać
always_send_full_costmap: true    # Wysyłanie całej mapy kosztów - tak dla pewności
publish_frequency: 10.0           # Częstotliwość publikowania - wyznaczona tak by komfortowo można było ją oglądać w rviz 
update_frequency: 20.0            # Częstotliwość aktualizacji dobrana tak by szybkość zmian dopasowana była do szybkości
                                  # działania lokalnego planera
rolling_window: true              # Utrzymywanie powiązania mapy z robotem - Mapa musi poruszać się wraz z robotem
footprint: [[-0.19, -0.14], [0.19, -0.14], [0.19, 0.14], [-0.19, 0.14]] # Obszar zajmowany przez robota (prostokąt)
width: 5.0          # Szerokość mapy (musi być odpowiednio duża by robot mógł omijać duże przeszkody)
height: 5.0         # Wysokość mapy (musi być odpowiednio duża by robot mógł omijać przeszkody - musi wiedzieć że za 
                    # przeszkodą znajduje się wolny obszar)     

# Położenie mapy względem robota, zdecydowaliśmy się wyśrodkować mapę lecz nie jest konieczne by badana przestrzeń za
# robotem była tak samo dużo jak ta przed nim
origin_x: -2.5      
origin_y: -2.5

obstacles:  # Konfiguracja warstwy przeszkód
    observation_sources: laser_scan  # Czujnik wykrywający przeszkody 
    laser_scan: {data_type: LaserScan, sensor_frame: base_laser_link, clearing: true, marking: true, topic: /laser_scan, inf_is_valid: true}
    # data_type - rodzaj wiadomości publikowanej przez czujnik
    # sensor_frame - człon lasera
    # clearing - true oznacza, że chcemy by laser mógł służyć do czyszczenia wolnej przestrzeni
    # marking - true oznacza, że chcemy oznaczać przeszkody
    # topic - temat na jakim czujnik publikuje wiadomości
    # inf_is_valid - jeśli true to gdy czujnik zwróci wartości nieskończone przeskalowane zostaną one do jego maksymalnego zasięgu
    obstacle_range: 3.0 # Maksymalny dystans z jakiego wykrywane są przeszkody - dobrany tak by robot był w stanie zareagować
                        # i jednocześnie by mapa nie była zaśmiecana nieistotnymi przeszkodami
    raytrace_range: 3.5 # Dystans powyżej jakiego przeszkody są kasowane z mapy kosztów - musi być nieco większy niż ten 
                        # z jakiego wykrywane są przeszkody
    footprint_clearing_enabled: true  # Parametr określający to czy chcemy by miejsca w których znajduje się baza robota
                                      # były automatycznie traktowane jako wolna przestrzeń - wartość true, ponieważ
                                      # w miejscu w którym znajduje się robot nie mogą jednocześnie znajdować się przeszkody

inflation:  # Konfiguracja warstwy nadmuchania
    inflation_radius: 0.18  # Promień nadmuchania - dobrany tak, by robot mógł przejechać przez wąskie przejścia ale
                            # jednocześnie by nie uderzał w ściany
    cost_scaling_factor: 40.0  # Szybkość spadku kosztu - dobrany tak, by robot mógł przejechać przez wąskie przejścia ale
                            # jednocześnie by nie uderzał w ściany
